version: "3.8"
services:
  backend:
    # Imagen de node a utilizar, junto con la última versión estable
    image: "node:18.6.0-alpine"
    user: "root"
    restart: always
    container_name: 'backend'
    # Directorio de trabajo dentro del contenedor
    working_dir: /home/backend
    tty: true
    # Entorno en el que se
    environment:
      - PROJECT_ACRONYM=don40
      - NODE_ENV=development
      - API_PORT=8091
      - API_URL_BASE_PATH=
      - API_URL=http://localhost:8091/api
      - MONGO_DB_URL=mongodb://mongodb:27017/don40
      - MONGO_DB_DATACOLLECTOR=mongodb://mongodb:27017/datacollector
      - TZ=Europe/Madrid
    # Se monta el código fuente en el directorio /home/node del contenedor
    volumes:
      - ./../../proyectos/cicatrices/:/home/backend
    # Indica los puertos TCP/IP los cuales se pueden accede a los servicios del contenedor
    # Expose es para que este disponible desde fuera de Docker, quitar en produccion
    expose:
      - "8091"
    # Se mapean los puertos locales al servidor host.
    ports:
      - '8091:8091' # 
      - '9231:9231' # puerto para depurar - comentar cuando se pase a pro
    # Indicamos que el contenedor se encuentra en una red, para que esté visible con el resto de contenedores.
    networks:
      - red-apps
    # Comando que ejecuta el contenedor para arrancar el servidor
    command: ash -c "apk add --no-cache mongodb-tools && apk add --no-cache openssh sshpass && npm install && npm run dev"
  mongodb:
      # Imagen de MongoDB a utilizar, junto con la última versión estable.
      image: "mongo:5.0.9"
      container_name: mongodb
      # Reinicia el servicio automáticamente.
      restart: always
      environment:
        - TZ=Europe/Madrid
      expose:
        - '27017'
      # Se mapean los puertos locales al servidor host.
      ports:
        - '27017:27017'
      # Se indica que tenemos un volumen para la base de datos. Con el objetivo, de persistir la información si paramos el contenedor.
      #volumes:
       # - mongodbvol:/data/db
        #- ./mongo/backup:/data/backup
      # Indicamos que el contenedor se encuentra en una red, para que esté visible con el resto de contenedores.
      networks:
        - red-apps
networks:
  red-apps:
    driver: bridge